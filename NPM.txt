node -v : version
npm nombrearchivo run: Para correr cualquier archivo en consola
npm install
Shorthand
# install
npm i <package>

# uninstall
npm un <package>+

# update
npm up <package>
npm install -g nombredeprograma: instalar programa en forma global
npm install -g typescript
npm install -g @angular/cli
npm i bootstrap jquery popper.js : Instalar bootstrap jquery popper
ng new nombredelproyecto: crea proyecto
npm start -- --port 4301: puerto 4301
ng serve -o: para abrir en local (localhost 4200). En webstorm no es necesario, solo
 con apretar el boton play y esperar un buen rato se hace correr.
ng g c nombreComponente: crea todo el componente (con html y css incluidos). Debe hacerse no en la carpeta src, sino en la carpeta principal de mas arriba (donde se guarda git)
(esto se hace desde una carpeta de un componente antiguo) ng g c nombreNuevoComponente/form --flat: Para crear un componente dentro de un directorio de otro componente antiguo (video45)
ng g class nombreClase: crear una clase 
ng g service nombreClaseServicio: crear clase servicio
ng g module bombreModulo (comando al nivel del proyecto de git, no de src): crear un modulo independiente. Esto se hace cuando tenemos muchos módulos de alguna librria externa a importar (primeNg, por ejemplo). Con este comando creará la carpeta nombre-modulo y dentro de ella nombre-modulo.ts. Aqui solo exportamos los modulos externos y luego importamos nombre-modulo.ts en nuestro app.module.ts  
ng g pipe ventas2/pipes/ordenar --skipTests: crear pipe con cli (lo declara automaticamente en ventas2.module.ts
Metodo Fernando (no recomendado!) ng g m carpeta/nombreModulo:generarModulo (debe tener creada la carpeta de antemano manualmente). Posteriormente debe generarse un componente dentro de la carpeta, en el modulo local nobreModulo exportar el componente creado y en app component importar el nombreModulo 
ng g c clientes/form --flat: crear directorio clientes con componente form adentro de él
ng g c nombreComponenteOmodulo --flat: evita que se cree la carpeta nombreComponenteOmodulo, en otras palabras creará el archivo suelto al nivel de appComponent
-is : para no crear archivos de estilos en component 
ng g guard auth/guard/auth --skipTests: genera un guard dentro de la carpeta auth (que debe estar creada de antemano).
ng g m reactive --routing: crear modulo de routing reactive-routing.module.ts que contiene rutas hijas (forChild) para ocupar mediante LazyLoad


REACT

npx create-react-app: nombreProyecto
npm start: iniciar
npm install react-router-dom
npm install axios
npm i react-transition-group:animaciones





Node (Juan Pablo)
npm init: genera package json
npm -D nodemon: cada vez que haya un cambio va a reiniciar el servidor. Ademas crea carpeta node_modules
npm i mongoose express dotenv: mongoose es la BBDD, express es el servidor, dotenv maneja variables de entorno (variables q en desarrollos son unas y en produccion son otras)
para generar el servidor, en package.json escribir  "scripts": {
    "start": "node .",
    "dev": "nodemon ."
  },
luego en linea comandos: npm run dev. Con esto cada vez q hay cambios se reinicia el servidor
npm i bcryptjs: hashear password
npm i express-validator: para validacion del usuario q estamos recibiendo
npm i jsonwebtoken
npm i cors

522519749



