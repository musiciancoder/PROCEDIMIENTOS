Ver proyecto beansex en el workspace

A spring bean (do not get mixed up with java bean, which is a class) is basically an object that is managed by spring framework througout the bean container. 
Since the object is instantiated and configured within bean container instead of a class (through operator "new"), it is always available for every class on the application and its got better performance since we do not depend on the heap.
The configuration for generating beans within the bean container is this:
 

package com.andres.beansex;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration //configuration class
public class Config {
    @Bean(name = "myBean") //we deposit the bean named "myBean" -which is an object of class Address - within the bean container
    public Address getAddress() {
        return new Address("High Street", 1000);
        
    }    
}

Naturally, class Address must be established convieniently:

package com.andres.beansex;

public class Address {
    private String street;
    private int number;

    public Address(String street, int number) {
        this.street = street;
        this.number = number;
    }

	public String getStreet() {
		return street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public int getNumber() {
		return number;
	}

	public void setNumber(int number) {
		this.number = number;
	}

	@Override
	public String toString() {
		return "Address [street=" + street + ", number=" + number + "]";
	}
	
}



The retrieval of the bean is done by refering to the bean name and the class that is going to consume it (class company in this case):

package com.andres.beansex;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;


@SpringBootApplication
public class BeansexApplication {

	public static void main(String[] args) {
		ApplicationContext apc = SpringApplication.run(BeansexApplication.class, args);
		int i=0;
		for (String s : apc.getBeanDefinitionNames()) {
			System.out.println("Bean" + i+": " +s);
			i++;
		}
		System.out.println(" ");
		
		Company company = apc.getBean("myBean", Company.class);
	
		System.out.println(company.toString());
		
		System.out.println("Address: " + company.getAddress());
		  
		 
		}
}

This way the object is available to be called out in any class of the proyect, like class Company for instance, which uses Address:

package com.andres.beansex;

import org.springframework.stereotype.Component;

@Component
public class Company {
	
    private Address address;

    public Company(Address address) {
        this.address = address;
    }

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	@Override
	public String toString() {
		return "Company [address=" + address + "]";
	}
}


--------------------------------------------------
https://www.youtube.com/watch?v=I1EQV5MSwl4&list=PLU8oAlHdN5Blq85GIxtKjIXdfHPksV_Hm&index=24

Segun Pildoras para crear un bean debe crearse una interfaz, luego una clase que implemente esta interfaz y sobreescriba los m√©todos de esta. Posteriormente en la clase
de configuracion se guarda el bean con:

@Bean 
NombreInterfaz nombreClaseImplementadora (){
return new NombreClaseImplementadora
}




