JAVA FAILSAFE VS FAILFAST
In Java, Fail-Fast and Fail-Safe iterators refer to different behaviors when modifying a collection while iterating over it.

Fail-Fast Iterators
Immediately throw ConcurrentModificationException if the collection is modified during iteration.

Work directly on the collection, not on a copy.

Examples: ArrayList, HashMap, HashSet iterators.

How it works: Uses an internal counter (modCount) to track modifications. If modCount changes after the iterator is created, an exception is thrown.

Example of Fail-Fast Iterator
java
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class FailFastExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");

        Iterator<String> iterator = list.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
            list.add("D"); // Modifying the collection during iteration
        }
    }
}
Output:

A
Exception in thread "main" java.util.ConcurrentModificationException
Fail-Safe Iterators
Do not throw exceptions when the collection is modified during iteration.

Work on a copy of the collection, not the original.

Examples: CopyOnWriteArrayList, ConcurrentHashMap.

How it works: Instead of tracking modifications, they iterate over a separate copy of the collection.

Example of Fail-Safe Iterator
java
import java.util.concurrent.ConcurrentHashMap;

public class FailSafeExample {
    public static void main(String[] args) {
        ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
        map.put(1, "A");
        map.put(2, "B");
        map.put(3, "C");

        for (Integer key : map.keySet()) {
            System.out.println(key + " => " + map.get(key));
            map.put(4, "D"); // Modifying the map during iteration
        }
    }
}
Output:

1 => A
2 => B
3 => C
No exception is thrown, but the new entry (4 => D) may or may not be reflected in the current loop.

Key Differences
Feature	Fail-Fast	Fail-Safe
Throws ConcurrentModificationException	‚úÖ Yes	‚ùå No
Works on original collection	‚úÖ Yes	‚ùå No (works on a copy)
Performance	‚ö° Faster	üê¢ Slower (due to copying)
Examples	ArrayList, HashMap, HashSet	CopyOnWriteArrayList, ConcurrentHas