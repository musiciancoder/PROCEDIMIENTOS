


*+/VOLVER A LA LINEA DE COMANDOS: FLECHA ARRIBA (TECLA ENTRE CTRL Y BLOQ MAYUS Y LETRA "Q" AL MISMO TIEMPO)

git config --global alias.ac '!git add . && git commit -m' -->git add * y git commit -m "nombrecommit" combinados.
git ac "nombrecommit" para comitear



Andres@LAPTOP-0JOL34HF ~
$ git --version
git version 2.21.0


---crear usuario---
Andres@LAPTOP-0JOL34HF ~
$ git config --global user.name "Andres"

Andres@LAPTOP-0JOL34HF ~
$ git config --global user.email "andresguitarra1980@gmail.com"





Andres@LAPTOP-0JOL34HF ~
$ git config --list
user.name=Andres
user.email=<andresguitarra1980@gmail.com>


-------------------------------


--------crear repositorios-----------------
Andres@LAPTOP-0JOL34HF ~
$ git --help init: ve lo que hace init en el manual de ayuda



 llegar a directorio en linux: cd C:/Users/Andres/Documents/miproyectoweb  RAYAS ADELANTE!!! EN WINDOWS RAYAS HACIA ATRAS!!!

inicializar repositorio (se debe estar ubicado en la carpeta de interes): git init

ls -la : ver archivos y archivos ocultos (ya que .git es un directorio oculto)

--clonar proyecto-----

git  clone ./miproyectoweb/ proyectoclonado (en mi computador; debemos ponernos en la carpeta anterior para hacer esto (la carpeta que contiene a miproyectoweb)

git  clone urlEnGithub proyectoclonado     (clonar un proyecto desde github a mi computador)



------------------------------------agregar archivos a un commit---------

git status (para ver cuales archivos estan o no agregados a un commit)
git add nombrearchivo  para agregar archivos a un commit
Si modificamos un archivo y escribimos git status, va a aparecer con rojo los cambios no agregados al commit de git (aunque si guardados con el editor de texto)
con git diff nombredearchivo muestra los cambios en el archivo (esto debe hacerce antes de agregar los cambios al commit con git add nombrearchivo)

--------------------------------para guardar un commit en la rama master-------
1. agregar los archivos a un commit
2.escribir git commit -m "Comentarios del commit"
Una vez hecho esto si escribimos git status va a salir "On branch Manager", nothing to commit working directory clean

git log   (para ver el commit en la rama master)
git log --oneline para ver el c digo del commit

$ git commit -am "Algun comentario de la modificacion" (esto es para guardar directamente algun cambio en el archivo en la rama principal sin tener que hacer git add.

luego se puede ver las diferencias en lo que se ha guardado en la rama con $ git diff codigocambio1 codigocambio2  (con git log --oneline se averiguan los cambios).

Volver atras en archivo agregado (con add) pero no comiteado (con commit) : git reset nombredearchivo (lo saca de add, pero no lo modifica en editor de texto); git checkout nombredearchivo (lo saca de add, y ademas lo modifica en editor de texto;


-----------------------------eliminar y deshacer un commit------------------
 git log --oneline para saber las claves de los commit
git reset --hard claveDeCommitAEliminar elimina ese commit (no se vuelve al estado anterior a add, sino que lo elimina)


---------------------------abrir un commit anterior--------------------------
cerrar el archivo, cerrar el servidor y escribir escribir git checkout codigoCommit (en este caso fb0a834), entonce se cambiar  el HEAD al que nos interesa y al abrir el archivo en la ventana de windows aparecera con los cambios.

Luego de lo anterior, 
Andres@LAPTOP-0JOL34HF /www/curso-mean2/client
$ git branch rama20 fb0a834

Andres@LAPTOP-0JOL34HF /www/curso-mean2/client
$ git status
HEAD desacoplada en fb0a834
nada para hacer commit, el  rbol de trabajo est  limpio

Andres@LAPTOP-0JOL34HF /www/curso-mean2/client
$ git checkout rama20
Cambiado a rama 'rama20'

Andres@LAPTOP-0JOL34HF /www/curso-mean2/client
$ git status
En la rama rama20
nada para hacer commit, el  rbol de trabajo est  limpio

Andres@LAPTOP-0JOL34HF /www/curso-mean2/client
$ git log --oneline
fb0a834 (HEAD -> rama20) video 79 bueno, con plantilla arreglada por mi
32cfe65 (rama15) video 79
3086b04 video 78
0f90ed1 video 77
d0d2935 video 76

PARA SUBIR LA RAMA Q HEMOS CREADO EN LOCAL A REMOTO: git push -u origin rama20


 
git reset HEAD~1 vuelve atras el ultimo commit, git reset HEAD~2 vuelve atras el penultimo commit, etc. Al darle git status aparecera en rojo, es decir en el estado anterior a add. Los archivos se podr n volver atras en el editor (pregunta si o no en el mismo editor)

---------------------Buscar commit-------------
$ git log --grep=palabraencomentario : busca segun el titulo/comentario
$ git log -S 'textoaBuscar' : busca un texto al interior de los archivos

ver un commit git show codigoCommit



---------------------------ramas---------------------
Una vez que se hace add a un archivo (pero no commit) no se ve nada en ninguna rama.m Si hacemos git stash guarda en estado add (pero no commit) en la rama que nos encontramos
crear nueva rama a partir de un comit ya existente en rama master: git branch nombreRama codigoDeAlgunCommitDeRamaMaster 
ver ramas: git branch (en blanco saldra la rama en la que estamos trabajando)
crear nueva rama desde cero:git branch nombreRama
pasar de una rama a otra rama: git checkout nombreDeOtraRama
eliminar ramas:  git branch -d nombreDeRama
pasar unaRama a la rama master: git merge unaRama  (esto debe hacerse estando parado en la rama master con branch checkout master)

-----------------------


---------------------github (o bitbucket o gitlab)------------------
para subir archivos.
NO HACER NADA EN LOCAL, PRIMERO SE INICIA EL REPOSITORIO EN REMOTO, SIN README.md
1.crear el repositorio en github con nombrerepositorio sin README.md
2. en git escribir los comandos para conectar remotamente:
echo "# nombrerepositorio" >> README.md
git init (aca se inicia en local el archivo.git)
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/musiciancoder/nombrerepositorio.git
git pull origin branchname --allow-unrelated-histories
git push -u origin master

luego intentar un cambio peque o y guardarlo en local con git add* , luego git commit -m"primer cambio"

Finalmente guardar este cambio en remoto: con git push origin master

para bajar archivos
1.crear algun archivo en github (y obviamente guardar los cambios en github)
2.escribir git fetch --all (entonces me guarda los archivos en local)
3.para guardar algun cambio desde remoto a local: con git pull origin master


DECCARTAR CAMBIOS EN UN ARCHIVO: git restore ruta absoluta del archivo (no hacer git add* ni git commit)



  f33538f video 97 bueno


CLONAR DESDE GITHUB

Crear una carpeta cualquiera
Copiar el link del proyecto en github
Ingresar por consola a la carpeta creada y escribir: git clone linkDelProyecto
Ingresar donde en la carpeta donde esta el src y escribir git init (se sigue siempre trabajando en esta carpeta). NO se necesita hacer pull.
Para saber si hay un remoto asociado: git config --get remote.origin,url

Nueva rama remota (primero crear rama local llamada "branch2"):
 git push --set-upstream origin branch2

Clonar rama git clone --branch nombreRama urlProyecto    

Actualizar proyecto desde rama remota
git pull origin nombreRamaRemota hace mergin automatico
git fetch origin nombreRamaRemota -->hace mergin manual
git pull origin branchname --allow-unrelated-histories:primer pull


Alguien creo otra rama y yo quiero meter esa rama en una rama local y poder verla
git checkout --track origin/daves_branch (esto crea una rama local del mismo  nombre da la remota q queremos ver)


VER CAMBIOS REMOTOS ANTES DE CLONAR

se realiza con git fetch origin nombreRama y luego git status. git fetch NUNCA mete nada en mi local, se puede usar sin preocupaciones.
para ver qué archivos serían modificamos si hicieramos un pull: git fetch && git diff HEAD @{u} --name-only, luego abrir nuestro archivo y los archivos en github y compararlos en un notepad o algo asi.
para ver donde vamos con respecto al remoto (y ver un panorama claro del remoto) --> git log origin/nombreRama ^nombreRama

ELIMINAR COMMITS
git reset idCommit -->elimina forever los commits que estan despues de idCommit 
git revert idCommit -->NO elimina los commits que estan despues de idCommit, sino que crea un nuevo commit igual a idCommit pero con otro idCommit (con otro id) y la cabeza se queda en él. Es mucho mas preferido y mas seguro. 


VER DIFERENCIAS

Nota:Fijarse en los colores, no en los signos menos ni mas. Lo siguiente es suponiendo que estamos trabajando en nuestra rama.

git diff --> Ver diferencias en local (antes de hacer el stage, despues de hacer el stage este comando no funciona) entre el head y lo último guardado.  

Ver diferencias entre dos commits de una misma rama en local:
git log -->ver idCommit
git diff idCommitMasViejo idCommitMasNuevo -->Va a mostrar en verde lo que esta en commit mas nuevo pero no en el mas viejo y en rojo lo que esta esta en commit mas viejo pero no en el mas nuevo.

Ver diferencias antes de hacer un push a github:
git diff --stat --cached origin/nombreRama-->solo menciona el archivo
git diff origin/main-->muestra las diferencias. En verde lo q tenemos en local y no en remoto.
git cherry -v-->list of commits waiting to be pushed

Ver diferencias antes de hacer un pull desde github:
git fetch y despues git log --name-status origin/nombreRama-->va a mostrar los logs de donde voy yo (el HEAD) en verde y donde va la rama remota en rojo
git fetch && git diff ramaLocal origin/ramaRemota-->Va a mostrar las diferencias. En verde lo que esta en remoto y yo no tengo en local. En rojo lo que yo tengo en local y no esta en remoto.

Resolucion de conflictos.
Si al hacer un pull tenemos conflictos, debemos ir al al/los archivos y modificarlos por lo general dejando el commitId remoto en el archivo y eliminando HEAD en el mismo archivo. Luego hacemos un commit en local e intentamos hacer el pull nuevamente.  



VER RAMAS
git fetch --all--> actualizar el remoto. Este es el primer paso para ver si ha habido cambios en otras ramas diferentes de las que hemos venido trabajando.
git branch -v -a-->muestra en verde nuestras ramas locales y en rojo las ramas remotas que aun no tenemos en nuestro local
traer rama remota a rama local-->git checkout -b local_branch_name origin/remote_branch_name (NO hay que crear rama local primero!!)
git diff otraRama --> compara la rama en la que estamos parado con otraRama


MODO DE TRABAJO:
Siempre siempre todos los dias antes de empezar a trabajar checkear si hay cambios en la rama master o en la main (suponiendo que comenzamos a trabajar en nuestro desarrollo a partir de ellas). con git fetch && git checkout -b master origin/master (pararnos en la master/main al ejecutar este comando en local).
Si hay cambios hacer inmediatamente un pull a nuestro main/remote local, luego comparar main/remote con la rama q estemos trabajando (comando git diff otraRama), ver si afecta nuestro desarrollo y si no hacer merge (mucho ojo con el merge, se recomienda respaldar el archivo antes de darle un merge, porque en las pruebas que hice me eliminó lo que sale en verde, o sea lo q teniamos inicialmente en nuestra rama de trabajo antes del merge )


GIT STASH:
es para guardar cambios sin hacer un commit, cosa que si no queremos guardar esos cambios en la rama actual pero sí en otra rama podamos hacerlo.
1.git stash save "algo algo"-->guarda los cambios en el stash. Si luego damos un git status veremos que ya no tenemos nada para comitear, esto es porque se gurdaron los cambios en el stash.
2.cambiarse de rama o crear rama nueva
3.(esto es opcional) Si deseamos ver el stash se puede hacer con git stash list
4. Con git stash apply podemos agregar el stash a nuestra rama nueva, pero ojo si tenemos mas cosas desde antes en el stash porque tambien se van a agregar (esto se puede ver con el comando anterior). De ser asi podemos seleccionar el item (e 1 por ejemplo) de la lista del stash q queremos agregar con el comando git stash pop stash@{1}.
5. (opcional )Con git stash clear borramos todo el stash. 

"please enter a commit message to explain why this merge is necessary"
The commit message is from Git, but it is actually the editor that keeps you from quitting. This is because Git uses your default editor, which for a variety of reasons is usually set to vi (it might be something else on your OS, like pico).

To write a commit message and get out of VI, follow these steps:

press i (i for insert)
write your merge message
press esc (escape)
write :wq (write & quit)
then press enter
You can also configure Git to use another editor to avoid having to use VI (or its close cousin VIM)

RESET VS REVERT
Si tenemos commit1, commit2, commit3, con el head en commit3 y queremos volver a dejar el head en commit2 y damos reset va a volver al commit2 el head borrando el commit3 forever, mientras que con revert no borra el commit3 sino que crea un nuevo commit4 que será igual al commit2 y el head estará en commit4.

GIT REBASE VS GIT MERGE

Supongamos que creamos ramaDesarrollo a partir de la main. Efectuamos uno o mas commits en ramaDesarrollo y luego nos damos cuenta que main tiene commits nuevos también. Acá tenemos dos alternativas: git merge o git rebase, en las dos tendremos que resolver conflictos, pero son diferentes desde el  punto de vista del historial del versionamiento. Primera alternativa (con rebase): al estar en la ramaDesarrollo podemos darle un comando git rebase main, entonces deberemos resolver el conflicto en la ramaDesarrollo, comitear y luego hacer el merge desde la main. Segunda alternativa (sin rebase) hacer un merge normal desde main, en cuyo caso el conflicto lo resolvemos en la main.  
En la primera  alternativa en el hostorial de commits en ramaDesarrollo simulará como si los cambios de la main que se produjeron despues de empezar a trabajar nosotros en ramaDesarrollo hubieran estado incorporados desde el  comienzo, lo que desde el punto de vista visual cuando se tienen demasiado commit es mas ordenado. Con la segunda alternativa se mantiene el historial exacto de commits.



