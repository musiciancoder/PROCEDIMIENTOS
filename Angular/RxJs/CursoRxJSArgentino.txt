1.Definicion
1.1. Definicion de RxJS que dió el Argentino:

RXjs (Reactive Extensions Library for JavaScript) es una librería de Javascript que nos permite manejar facilmente código asincrono (aunque tambien es factible manejar código sincrono, pero está pensado para asíncrono).
Utiliza fundamentalmente por un lado observables, que mediante el patrón manyToOne permite que varios subscriptores puedan ser notificados de un cambio en un evento o en la data y por otro lado operadores, que mediante 
código lo mas parecido a programacion funcional logran secuenciar distintas tareas.


1.2. Definición de RxJS de la documentación (notar que no se menciona patron one to many sino Observer e Iterator):

RxJS is a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type, the Observable, satellite types (Observer, Schedulers, Subjects) and operators inspired by Array methods (map, filter, reduce, every, etc) to allow handling asynchronous events as collections.

Think of RxJS as Lodash for events.

ReactiveX combines the Observer pattern with the Iterator pattern and functional programming with collections to fill the need for an ideal way of managing sequences of events.

The essential concepts in RxJS which solve async event management are:

Observable: represents the idea of an invokable collection of future values or events.
Observer: is a collection of callbacks that knows how to listen to values delivered by the Observable.
Subscription: represents the execution of an Observable, is primarily useful for cancelling the execution.
Operators: are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.
Subject: is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.
Schedulers: are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others. 
 