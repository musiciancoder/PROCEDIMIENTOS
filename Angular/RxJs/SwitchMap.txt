//se usa para obtener un valor por id


import { Component, OnInit } from '@angular/core';
import { Heroe, Publisher } from '../../interfaces/heroes.interface';
import { HeroesService } from '../../services/heroes.service';
import { ActivatedRoute,Router } from '@angular/router'; //para obtener parametros de la url
import { switchMap } from 'rxjs/operators';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { ConfirmarComponent } from '../../components/confirmar/confirmar.component';
//import { ConfirmarComponent } from '../../components/confirmar/confirmar.component';



@Component({
  selector: 'app-agregar',
  templateUrl: './agregar.component.html',
  styles: [
  ]
})
export class AgregarComponent implements OnInit {

publishers = [
  {
    id:'DC Comics',
    desc:'DC - Comics'
  },
  {
    id:'Marvel Comics',
    desc:'Marvel - Comics'
  }
];

heroe:Heroe = {
  superhero:'',
  alter_ego:'',
  characters:'',
  first_appearance:'',
  publisher: Publisher.DCComics, //valor por defecto
  alt_img:''
}

  constructor(private heroesService:HeroesService,
              private activatedRoute:ActivatedRoute,
              private router:Router,
              private snackBar:MatSnackBar,
              private dialog: MatDialog         
    ) { }

  ngOnInit(): void {
    if(!this.router.url.includes('editar')){ //para que no aparezca el error 404, hhtp://localhost:3000/heroes/undefined cada vez que cargamos la pagina
      return;
    }
    this.activatedRoute.params.
    pipe(
      switchMap(({id})=>this.heroesService.getHeroePorId(id)) //obtener heroe mediante id
    ).
    subscribe(
    //({id})=>console.log(id) //{id} deconstuccion del id para obtener la url de los params
      heroe=>this.heroe=heroe
    )
  }

  guardar(){ //guardar heroe en la bbdd
   // console.log(this.heroe);
    if(this.heroe.superhero.trim().length===0){ //si no hay nada escrito
      return;
    }
    //Si existe un id quiere decir que estamos actualizando y no guardando u heroe por primera vez
    if(this.heroe.id){
      //actualizar heroe
      this.heroesService.actualizarHeroe(this.heroe)
      .subscribe(heroe=>
        //console.log('Actualizando', heroe)
        this.mostrarSnakbar('Registro actualizado')
      )
    }else
    //guardando un heroe por primera vez
     this.heroesService.agregarHeroe(this.heroe)
    .subscribe(
    heroe=>{this.router.navigate(['/heroes/editar',heroe.id]);
    this.mostrarSnakbar('Registro creado')}
       )
  }

  borrarHeroe() {

    const dialog = this.dialog.open( ConfirmarComponent, {
      width: '250px',
      data: this.heroe
    });

    dialog.afterClosed().subscribe(
      (result) => {

        if( result ) {
          this.heroesService.borrarHeroe( this.heroe.id! )
            .subscribe( resp => {
              this.router.navigate(['/heroes']);
            });
        }
        
      }
    )



  }

  mostrarSnakbar(mensaje:string){
    this.snackBar.open(mensaje,'ok',{
      duration:2500
    })
  }
}
