*La captura de un error se realiza con throws Exception en el metodo que llama al método que arroja error y con try-catch donde se produce el problema.
* La captura con try-catch solo sirve para que el programa se siga ejecutando despues del error, sin embargo el error va a estar siempre presente. Si no ponemos el try-catch el programa muestra el error y se cae. Ojo, que una vez que controlamos el error el prinstacktrace puede salir al ultimo o primero en la consola.
* Existen dos tipos de excepciones: Checked Exceptions, que son errores que no dependen del programador y ocurren en tiempo de compilacion (puede ser un nombre de archivo que no se encuentra, por ejemplo), estas son las checked exceptions en inglés, y las RunTimeException que sí dependen del programador y ocurren en tiempo de ejecucion (unchecked exceptions). CheckedExceptions deben ser siempre capturados ya q si no no compila, mientras que UncheckedExceptions pueden o no ser capturados.
* Notar que capturar un RunTimeException no es buena práctica ya que el error debiera ser solventado a través de código, sin embargo es un recurso válido a veces.
* Muchas veces se desea que un programa arroje un error intencionalmente y se caiga. Esto es muy comun en una API con spring, por ejemplo, aunque pueden haber mas casos.
Esto se logra definiendo una clase de excepción con dos constructores. Luego se invoca a esta clase desde la parte del código donde queremos que el programa se caiga con 
if (condicion para que se caiga) {throw new NombreExcepcion("Mensaje de la razon por la cual se esta cayendo")}.
*La arquitectura de Spring sugiere crear un paquete de excepciones customizadas, con un clase controlador de excepciones (ExceptionHandler) en este mismo paquete, que gestiona las excepciones individuales customizadas para cada tipo de respuesta (400, 401, 500, etc.).).
*Ejemplos de handled or checked exceptions:IOException,SQLException,MalformedURLException (Heredan directamente de Exception)
*Ejemplus de unhandled or unchecked exceptions:NullPointerException,NumberFormatExceptios,ClassCastException,IndexOutOfBoundsException (Heredan de RunTimeException, que a su vez hereda de Exception).

how can we control checked exceptions?
In Java, checked exceptions must be either handled or declared, because the compiler enforces their handling. You can control them in the following ways:

1. Handle the Exception Using try-catch
java
try {
    throw new IOException("Something went wrong!");
} catch (IOException e) {
    System.out.println("Caught exception: " + e.getMessage());
}
✅ This prevents the program from crashing by catching and processing the exception.

2. Declare the Exception Using throws
java
public void readFile() throws IOException {
    // Code that might throw IOException
    throw new IOException("File not found!");
}
✅ The caller must handle or propagate the exception.

3. Use throws and try-catch Together
java
public void riskyOperation() throws SQLException {
    // Code that might throw SQLException
}

public void safeOperation() {
    try {
        riskyOperation();
    } catch (SQLException e) {
        System.out.println("Handled database error!");
    }
}
✅ This gives flexibility: the calling method decides how to handle the exception.

Key Takeaways
Checked exceptions (e.g., IOException, SQLException) must be handled or declared.

Unchecked exceptions (e.g., NullPointerException, ArrayIndexOutOfBoundsException) don’t need explicit handling.

Best practice: Use specific exceptions instead of catching Exception, to avoid masking errors.

