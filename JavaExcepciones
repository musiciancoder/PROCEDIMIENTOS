*La captura de un error se realiza con Throw Exception en la declaración del método que arroja error y con try-catch al llamar a este método.
* La captura con try-catch solo sirve para que el programa se siga ejecutando despues del error, sin embargo el error va a estar siempre presente. Si no ponemos el try-catch el programa muestra el error y se cae.
* Existen dos tipos de errores (ambos heredan de la clase Exception): IOException, que son errores que no dependen del programador (puede ser un archivo que no se encuentra, por ejemplo) 
y RunTimeException que sí dependen del programador.  IOException deben ser siempre capturados, mientras que RunTimeException pueden o no ser capturados.
* Notar que capturar un RunTimeException no es buena práctica ya que el error debiera ser solventado a través de código, sin embargo es un recurso válido a veces.
* Muchas veces se desea que un programa arroje un error intencionalmente y se caiga. Esto es muy comun en una API con spring, por ejemplo, aunque pueden haber mas casos.
Esto se logra definiendo una clase de excepción con dos constructores. Luego se invoca a esta clase desde la parte del código donde queremos que el programa se caiga con 
if (condicion para que se caiga) {throws new NombreExcepcion("Mensaje de la razon por la cual se esta cayendo")}.
*La arquitectura de Spring sugiere crear un paquete de excepciones, con un clase controlador de excepciones en este mismo paquete, que gestiona las excepciones individuales.

