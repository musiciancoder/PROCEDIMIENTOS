

INSTALACION

Setear Maven en el IDE
1.Descargar Maven
2.Verificar que el archivo settings.xml esta dentro de carpeta conf en donde se descargó maven
3.Si estamos trabajando para una empresa cambiar user y password en settings.xml. Normalmente el lider técnico de la empresa debiera entregar otro settings.xml 
distinto al que descargamos, el que normalmente se debe guardar en la carpeta C/Usuarios/ahd1/.m2
4.Agregar variables de entorno:



		MAC:

			export M2_HOME=/Users/bharaththippireddy/Documents/apache-maven-3.3.9/
			export PATH=$M2_HOME/bin:$PATH
		
		Windows:

			Select Start, go to Control Panel. double click System, and select the Advanced tab.
			Click Environment Variables.
			Select the PATH environment variable and edit it to include the <MavenHome>/bin folder
			Reopen Command prompt window, and run your java code.
			
			Con el comando C\:mvn -version se ve si tenemos maven instalado o no

5.En eclipse, run-->run as-->Maven build...-->en viñeta main, en goals escribir clean install y en User Settings apuntar hacia nuestro settings.xml, incluyendo en la ruta el settings.xml (no olvidar que las barras de ruta van hacia atras)


CREAR UN PROJECTO JAVA CON MAVEN DESDE CONSOLA

1)con linea de comando en carpeta nueva (C:\java-project), cortar y pegar: 
mvn archetype:generate -DgroupId=com.bharath -DartifactId=java-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false 


archetype:generate es un ejemplo de "goal"; en este caso el goal es generar un proyecto.
por defecto genera war, si queremos generar jar se agrega -Dversion=jar

-DgroupId=com.bharath en el nombre de la compañía (por ejemplo com.equifax)

-DartifactId=java-project es el nombre del proyecto

-DarchetypeArtifactId=maven-archetype-quickstart es el tipo de proyecto que estamos creando

-DinteractiveMode=false  elimina caracteristicas por defecto, ya que estamos proporcionando groupId y artifactId

mvn archetype:generate -DgroupId=com.bharath -DartifactId=java-web-project -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

Tanto en IntelliJ como en Eclipse están especificadas las librerias externas que corresponden al Core Java (JRE en eclipse o JDK en Intellij) o a librerias de terceros agregadas en el pom (Maven) .
Recordar que una dependencia en el pom puede tener varios jar, la relación no es uno a uno.

2) ir a carpeta del proyecto con cd java-web-project

3) Luego generar carpeta target (que permite correr programas con linea de comandos) en la carpeta del proyecto con: mvn install

EJECUTAR PROGRAMAS DESDE JAR

1. Crear carpeta target con mvn install

Correr programa desde linea de comando: java -cp target/java-project-1.0-SNAPSHOT.jar com.bharath.App

Correr un jar: en carpeta target desde linea de comandos escribir: java -jar nombredelJar.jar.

Parar un jar: con ctrl + C


IMPORTAR UN PROYECTO MAVEN YA EXISTENTE

1)File-->import-->existing maven project
2)Seleccionar la carpeta donde tenemos el proyecto
3)Si no se ve el JRE System Library lo agregamos com boton dercho sobre el proyecto, Build Path-->Congigure Buil Path-->Libraries-->doble click en JRE System Library y agregamos el JRE correspondiente a nuestro JDK
4)Si seguimos teniendo problemas, boton derecho sobre el proyecto -->properties-->escribir maven en el buscador en properties-->borrar el archivo que sale como pom


ARCHIVO POM
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion> --> POM = Project Object Model; Este Model es 4.0.0 para que sea compatible con maven 3.  
  //Los siguientes cuatro son obligatorios y componen las coordenadas que usa maven para generar el jar propio
  <groupId>com.bharath</groupId> --> Empresa
  <artifactId>hellomaven</artifactId> -->Nombre Proyecto
  <packaging>jar</packaging> -->Tipo de package
  <version>1.0-SNAPSHOT</version> -->Version
  //los siguientes dos son opcionales
  <name>hellomaven</name>
  <url>http://maven.apache.org</url>
  //Ejemplo de dependencia
  <dependencies>
    <dependency>
 //Los siguientes tres son obligatorios para dependencias externas
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope> //no es obligatorio
    </dependency>
  </dependencies>
</project>

RELOAD 
Reloading es descargar librerias q estan en el POM a nuestro .m2
Recordar que cuando hacemos mvn clean install ni el ciclo de clean ni del build (o sea install) hacen Reload.
Para el reload hacer click en el boton de reload del IDE (lo mas facil) o bien con comando mvn dependency:resolve -U (esto solo recarga al igual q el boton, no hace nada mas).
Si queremos recargar solo una libreria en vez de todas las del pom (pq estamos teniendo problemas con esta libreria) es con comando mvn dependency:resolve -DincludeGroupIds=com.example -DincludeArtifactIds=my-library -U



PLUGGIN
Un pluggin es un grupo de goals o tareas a ser realizadas, solo que en el caso de los pluggins estos goals pueden pertenecer a dos o mas fases; en cambio los goals asociados a una fase por definicion son siempre los mismos goals. 
Maven está compuesto de varios pluggin. 
La nomenclatura para ejecutar un goal es mvn plugginID:goalID (esto raramente se ocupa, como se explica mas abajo en el ciclo de vida).  Sin embargo usualmente un plugin, ya esta dicho no se compone de un solo goal sino de varios. Un ejemplo de esto es el comando mvn compiler:compile donde compiler es el plugin y compile es el goal. Otro ejemplo es archetype:generate

En lineas generales ejecutamos un goal independientemente de cualquier fase con:
mvn <PLUGIN>:<GOAL>  (notar que aunque va el nombre del pluggin ("compiler", por ejemplo) el que se ejecuta es el goal, no el pugin
Ejecutamos una fase entera con:
mvn compile (notar que en este caso la fase es "compile" y se llama igual que en el goal de dos lineas mas arriba, pero esto es solo coincidencia)

A Maven plugin is a group of goals; however, these goals aren't necessarily all bound to the same phase.

For example, here's a simple configuration of the Maven Failsafe plugin, which is responsible for running integration tests:

<build>
    <plugins>
        <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven.failsafe.version}</version>
            <executions>
                <execution>
                    <goals>
                        <goal>integration-test</goal>
                        <goal>verify</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
Copy
As we can see, the Failsafe plugin has two main goals configured here:

integration-test: run integration tests
verify: verify all integration tests passed
We can use the following command to list all goals in a specific plugin:

mvn <PLUGIN>:help
Copy
For example, to list all goals in the Failsafe plugin, we can run:

mvn failsafe:help
Copy
And the output will be:

This plugin has 3 goals:

failsafe:help
  Display help information on maven-failsafe-plugin.
  Call mvn failsafe:help -Ddetail=true -Dgoal=<goal-name> to display parameter
  details.

failsafe:integration-test
  Run integration tests using Surefire.

failsafe:verify
  Verify integration tests ran using Surefire.
Copy
To run a specific goal without executing its entire phase (and the preceding phases), we can use the command:

mvn <PLUGIN>:<GOAL>
Copy
For example, to run the integration-test goal from the Failsafe plugin, we need to run:

mvn failsafe:integration-test

CICLO DE VIDA
Existen tres tipos de ciclos de vida: Build (este es por defecto), Clean y Site. Cuando se habla de ciclo de vida a secas (y de ahora en mas en nuestro caso) se refiere al Build
Cada fase del ciclo de vida de maven está asociado a uno o mas pluggins (aunque generalmente esta relacion es 1:1) y a su vez los pluggins pueden tener uno o mas goals.
Cuando definimos un packaging en el pom con  <packaging>jar</packaging> (puede ser un war tb) estamos asociando implicitamente las fases del ciclo de vida
a goals, por lo que para ejecutar una fase simplemente se hace con el comando mvn nombreDeFase, es decir no se llaman pluggins ni goals en la linea de comandos y cuando se hace esto todos los goals de las fases anteriores se ejecutan tambien.

Fases del ciclo de vida         Pluggin:Goal (notar que al llevar packing asociamos fases con goals, no fases con pluggin. El pluggin que aparece en la siguiente lista es simplemente el pluggin al que pertenece el goal)
process-resources               resources:resources
compile		                compiler:compiler
test		                surefire:test
package		                jar:jar
Lo anterior será efectivo para el 99% de los proyectos, sin embargo hay un 1% de proyectos que no lleva packing y debemos especificar pluggins, o bien que aunque lleve packing debemos especificar pluggins
de todos modos. En estos casos podemos invocar al pluggin o al goal directamente con plugginID:goalID. Por ejemplo para el plugin del compiler que se muestra mas abajo se llama con mvn compiler:compile

DEPENDENCIAS
Para dependencias en el pom solo tres elementos son necesarios: groupId, artifactId y version.
Las dependencias que estan en nuestro pom jamás se guardan en nuestro proyecto como carpetas ni jar propiamente tal (aunque el IDE lo muestra abajo del proyecto), en vez 
de eso la primera vez quedamos un mvn install descarga directamente las dependencias desde el repositorio de la web de maven y lo guarda en la carpeta repository de m2. La siguiente vez, si no
hay una modificacion de esta dependencia en el pom no hace nada, porque la libreria ya esta en el pom, solo si hay alguna modificacion de esta libreria se va nuevamente
al repositorio de la web de maven.
Cuando queremos agregar una dependencia nueva, se copia directamente desde el mvn repository de la web en el pom, y al guardar el proyecto (no al actualizar maven como al agregar un plugin) se
apareceran automaticamente las librerías respectivas en en el IDE y se guardatán en nuestro repositorio local si es que no las teníamos.

CAMBIAR CONFIGURACION DE UN PLUGIN
La configuracion de los plugins por defecto no aparece en el pom.xml, sino en el Effective POM.
Si queremos cambiar la configuracion de un plugin debemos agregarlo expresamente en el POM. 
Por ejemplo para cambiar la configuracion del compilador java a 1.8, debemos agregar:
  <build> (esto es porque estamos en el ciclo de viva Build, no Clean ni Site)
   <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.2</version>
        <configuration>
          <source>1.8</source>  -->Java source code syntax level — enables Java 8 features like lambdas, streams, etc. Maven uses Java 5 as the default source/target if not specified, so this config is essential when using newerJavafeatures.
          <target>1.8</target>  -->JVM bytecode compatibility — ensures class files can run on Java 8 or newer JVMs.
        </configuration>
      </plugin>
    </plugins>
  </build>
Luego de agregarlo debemos actualizar maven
Las opciones de configuration (<source> y <target> en nuestro ejemplo) se pueden obtener en la documentacion al hacer click en el goal de cada pluggin (ver https://www.youtube.com/watch?v=6ySq0a6YFjA minuto 7:55). 
maven-compiler-plugin es el  único plugin que tiene source y target, por eso es que debemos sobrescribirlo, porque si no tendría la version por defecto para  source y target que es 1.5.

SCOPES
Los scopes de cada dependencia externa se usan para definir en qué goal se ejecuta la dependencia.
Por ejemplo:
<scope>test</scope> para que se ejecute solo en pruebas (normalmente esto va normalemnte en la dependencia de Junit
<scope>provide</scope> scope can be used to tell maven that we do not need a dependency to be packaged in to a war that will be deployed to a container which will already have that jar/dependecy
Se usa en los goals test y run, pero no en el build (no va en el war). Por eso para generar el war se debe hacer explícito en la dependencia servlet-api con scope provided para aplicaciones web.
<scope>compile</scope> la dependencia se ejecuta en los goal build, test y run. Si no especificamos ningun scope, este es el scope por defecto.
<scope>runtime</scope> la dependencia se ejecuta en los goals test y run, pero no en el goal compile, por lo que no se ejecuta al compilar.

PROFILES
Es para adquirir portabilidad, es decir poder setear configuraciones de BBDD y url en etapas local, pruebas y produccion en forma independiente con el application.properties

MAVEN WRAPPER
mvnw y mvnw.cmd : Permiten ejecutar comandos maven desde la linea de comandos (./mvnw clean install por ejemplo (notar la diferencia con mvn clean install)), NO desde el IDE. mvnw es para linux y mvnw.cmd es para windows.
Básicamente lo que hacen estos comandos es gestionar maven desde la linea de comandos con la versión que está en maven-wrapper properties, ya sea para gestionar librerias o para construir el proyecto en el caso de que un usuario no tuviera maven instalado.

https://maven.apache.org/wrapper/

QUE CONTIENE UN JAR?
1. Compiled Java Classes (.class files)
2. Manifest File (META-INF/MANIFEST.MF) -->contiene coordenadas para clase main, por ejemplo. Main-Class: com.example.Main
3. Resource Files. Images, Configuration files (.properties, .xml, .yaml, etc.), other data files.
4.Libraries
While .jar files don't normally contain other .jars, some tools (like Spring Boot) package nested jars to create "fat" or "uber" jars. These contain:
The application classes
All dependencies (other .jars)
5.Digital Signatures and Certificates (optional)
If the .jar is signed, it may contain:
Signature files (.SF)
Certificate files (.DSA, .RSA)
NO CONTIENE EL POM.XML PQ LAS LIBRERIAS EXTERNAS (OTROS .JAR) YA ESTAN CONTENIDAS EN EL JAR (ESTO LO DICE EXPRESAMENTE CHATGTP).


Maven Wrapper
The Maven Wrapper is an easy way to ensure a user of your Maven build has everything necessary to run your Maven build.

Why might this be necessary? Maven to date has been very stable for users, is available on most systems or is easy to procure: but with many of the recent changes in Maven it will be easier for users to have a fully encapsulated build setup provided by the project. With the Maven Wrapper, this is very easy to do and it's a great idea and initial implementation borrowed from Gradle.

The easiest way to setup the Maven Wrapper for your project is to use the Maven Wrapper Plugin with its provided wrapper goal. To add or update all the necessary Maven Wrapper files to your project execute the following command:

mvn wrapper:wrapper
Normally you instruct users to install a specific version of Apache Maven, put it on the PATH and then run the mvn command like the following:

mvn clean install
But now, with a Maven Wrapper setup, you can instruct users to run wrapper scripts:

./mvnw clean install
or on Windows

mvnw.cmd clean install
A normal Maven build will be executed, with the one important change that if the user doesn't have the necessary version of Maven specified in .mvn/wrapper/maven-wrapper.properties it will be downloaded for the user first, installed and then used.

Subsequent uses of mvnw/mvnw.cmd use the previously downloaded, specific version as needed.








